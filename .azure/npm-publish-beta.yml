parameters:
  - name: version
    type: string
  - name: nodeVersion
    type: string
    default: ''
  - name: tagPrefix
    type: string
    default: ''
  - name: dryRun
    type: boolean
    default: false
  - name: pushTags
    type: boolean
    default: true
  - name: workingDir
    type: string
    default: '$(Pipeline.Workspace)/github'

steps:
  - checkout: self
    path: github
    persistCredentials: true
    clean: true
    fetchTags: true

  - script: |
      git config --global user.email "pipeline@kth.se"
      git config --global user.name "Pipeline"
      git fetch --all
      git checkout $BRANCH_NAME
    displayName: git checkout
    workingDirectory: ${{ parameters.workingDir }}
    env:
      BRANCH_NAME: ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}

  - ${{ if parameters.nodeVersion }}:
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: ${{ parameters.nodeVersion }}

  - task: Npm@1
    displayName: NPM Install
    inputs:
      command: ci
      workingDir: ${{ parameters.workingDir }}

  - script: cat public/sass/variables/_svg_data.scss
    displayName: log svg file
    workingDirectory: ${{ parameters.workingDir }}

  - task: Npm@1
    displayName: NPM Build
    inputs:
      command: custom
      workingDir: ${{ parameters.workingDir }}
      customCommand: run build

  - script: cat public/sass/variables/_svg_data.scss
    displayName: log svg file
    workingDirectory: ${{ parameters.workingDir }}

  - task: Npm@1
    displayName: NPM generate svg
    inputs:
      command: custom
      workingDir: ${{ parameters.workingDir }}
      customCommand: run generate-svg-data

  - script: cat public/sass/variables/_svg_data.scss
    displayName: log svg file
    workingDirectory: ${{ parameters.workingDir }}

  - task: Npm@1
    displayName: Version NPM Package
    inputs:
      verbose: true
      command: custom
      workingDir: ${{ parameters.workingDir }}
      customCommand: 'version ${{ parameters.version }}'
      publishEndpoint: $(npmServiceConnection)

  - script: cat public/sass/variables/_svg_data.scss
    displayName: log svg file
    workingDirectory: ${{ parameters.workingDir }}

  - script: |
      echo TAG $TAG
      echo "##vso[task.setvariable variable=NPM_TAG;]$PREFIX$TAG"
    env:
      PREFIX: ${{ parameters.tagPrefix }}
      ${{ if in(parameters.version, 'major', 'minor', 'patch') }}:
        TAG: latest
      ${{ if notIn(parameters.version, 'major', 'minor', 'patch') }}:
        TAG: next

  - task: Npm@1
    displayName: Publish NPM Package (public)
    inputs:
      verbose: true
      workingDir: ${{ parameters.workingDir }}
      command: publish
      publishRegistry: useExternalRegistry
      publishEndpoint: $(npmServiceConnection)
    env:
      npm_config_tag: $(NPM_TAG)
      ${{ if parameters.dryRun }}:
        npm_config_dry_run: 'true'

  - script: git push origin
    condition: and(succeeded(), ${{ not(parameters.dryRun) }})
    displayName: git push
    workingDirectory: ${{ parameters.workingDir }}

  - script: git push --tags
    condition: and(succeeded(), ${{ and( parameters.pushTags, not(parameters.dryRun) ) }})
    displayName: git push tags
    workingDirectory: ${{ parameters.workingDir }}
